buildscript {
	ext {
		springBootVersion = '1.5.3.RELEASE'
	}
	repositories {
		mavenCentral()
	}
	dependencies {
		classpath("org.springframework.boot:spring-boot-gradle-plugin:${springBootVersion}")
	}
}

apply plugin: 'java'
apply plugin: 'org.springframework.boot'
apply plugin: 'idea'

version = '0.0.1-SNAPSHOT'
sourceCompatibility = 1.8

ext {
    generatedSourcesDir = file("${buildDir}/generated-sources/javac/main/java")
}
sourceSets {
    main {
        java {
            srcDir 'src/main/java'
            srcDir generatedSourcesDir
        }
    }
}

repositories {
    mavenCentral()
}

dependencies {
    compile (
        [group: 'org.springframework.boot', name: 'spring-boot-starter-web'],                // Spring
        [group: 'org.springframework.boot', name: 'spring-boot-starter-security'],
        [group: 'org.springframework.boot', name: 'spring-boot-starter-data-jpa'],
        [group: 'org.springframework.boot', name: 'spring-boot-devtools'],

        [group: 'org.elasticsearch',        name: 'elasticsearch', version: '5.4.1'],        // Elasticsearch
        [group: 'org.elasticsearch.client', name: 'transport',version: '5.4.1'],

        [group: 'mysql',                    name: 'mysql-connector-java', version: '6.0.6'], // Database
        [group: 'org.hibernate',            name: 'hibernate-jpamodelgen', version: '5.2.11.Final'],

        [group: 'io.reactivex.rxjava2',     name: 'rxjava', version: '2.1.0'],              // Rxjava

        [group: 'org.projectlombok',        name: 'lombok', version: '1.16.16'],            // Lombok

        [group: 'org.apache.logging.log4j', name: 'log4j-core', version: '2.8.2'],          // Log4j
        [group: 'org.apache.logging.log4j', name: 'log4j-api',  version: '2.8.2'],

        [group: 'com.google.guava',         name: 'guava', version: '23.0'],                // Guava

        [group: 'org.glassfish',            name: 'javax.json', version: '1.1'],            // Json
        [group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: '2.9.0.pr3']
    )

    testCompile (
        [group: 'org.springframework.boot', name: 'spring-boot-starter-test'],
        [group: 'com.h2database', name: 'h2', version: '1.4.196']
    )
}

compileJava {
    doFirst {
        generatedSourcesDir.mkdirs() // Directory should exists before compilation started.
    }
    options.compilerArgs += ['-s', generatedSourcesDir]
}

springBoot {
    excludeDevtools = false
}

bootRun{
    jvmArgs = ["-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=8000"]
}

idea {
    module {
        outputDir file('build/classes/main')
        testOutputDir file('build/classes/test')
    }
}