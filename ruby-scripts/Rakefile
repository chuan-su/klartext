require "bundler/gem_tasks"
require "rspec/core/rake_task"
require 'standalone_migrations'
require 'klartext'

StandaloneMigrations::Tasks.load_tasks
RSpec::Core::RakeTask.new(:spec)

task :default => :spec

namespace :es do
  task :setup do
    before = Time.now
    index = 'klartext'; types = ['word','post']
    es_client = Klartext::ESClient.new
    es_client.delete_indices index
    es_client.create_indices index
    es_client.put_mapping index,types
    printf "took %.2fs\n", Time.now - before
  end
  # run rake dict:download to download online dictionary first
  task :sync_words do
    # curl -s -XPOST localhost:9200/_bulk --data-binary @file_name
    before = Time.now
    es_bulk_endpoint = "http://es:9200/_bulk"
    ['folkets_sv_en_public','folkets_en_sv_public'].each do |file_name|
      file = File.open file_name 
      chunker = lambda do
        file.read(Excon.defaults[:chunk_size]).to_s
      end
      Excon.post(es_bulk_endpoint,:request_block => chunker)
      file.close
    end
    printf "took %.2fs\n", Time.now - before
  end

  task sync_posts: :environment do
    before = Time.now
    es_client = Klartext::ESClient.new
    es_client.sync_posts
    printf "took %.2fs\n", Time.now - before
  end
end

namespace :dict do
  task :download,[:lang] => [:environment] do |t,args|
    before = Time.now
    case args[:lang]
    when 'en'
      url = "http://folkets-lexikon.csc.kth.se/folkets/folkets_en_sv_public.xml"
    else
      url = "http://folkets-lexikon.csc.kth.se/folkets/folkets_sv_en_public.xml"
    end
    dict = Klartext::Dictionary.new url
    dict.download
    printf "took %.2fs\n", Time.now - before
    printf "donwloaded dictionary #{dict.file}"
  end

  task download_examples: :environment do
    before = Time.now
    url = "http://folkets-lexikon.csc.kth.se/folkets/folkets_sv_en_public.xml"
    dict = Klartext::Dictionary.new url
    dict.download_examples
    printf "took %.2fs\n", Time.now - before
  end
end

namespace :db do
  task :import_posts,[:csv_file] => [:environment] do |t,args|
    before = Time.now
    es_client = Klartext::ESClient.new
    Klartext::Post.import(args[:csv_file])
    # import posts with callback
    # Klartext::Post.import(args[:csv_file]) do |post|
    #   es_client.sync_post post
    # end
    printf "took %.2fs\n", Time.now - before
  end
end


